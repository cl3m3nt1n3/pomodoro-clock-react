[{"/Users/cl3m3nt1n3/Documents/GitHub/pomodoro-clock-react/src/reportWebVitals.js":"1","/Users/cl3m3nt1n3/Documents/GitHub/pomodoro-clock-react/src/index.js":"2","/Users/cl3m3nt1n3/Documents/GitHub/pomodoro-clock-react/src/App.js":"3"},{"size":362,"mtime":1609865755619,"results":"4","hashOfConfig":"5"},{"size":478,"mtime":1609865965863,"results":"6","hashOfConfig":"5"},{"size":5515,"mtime":1609866103946,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pv9w53",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/Users/cl3m3nt1n3/Documents/GitHub/pomodoro-clock-react/src/reportWebVitals.js",[],"/Users/cl3m3nt1n3/Documents/GitHub/pomodoro-clock-react/src/index.js",[],"/Users/cl3m3nt1n3/Documents/GitHub/pomodoro-clock-react/src/App.js",["15","16","17","18","19","20","21","22","23","24","25","26","27","28","29"],"import './App.css';\nimport React from 'react';\n\nclass App extends React.Component{\n  state = {\n    sessionLength: 25,\n    breakLength: 5,\n    timeLeft: 25*60,\n    pauseClicked:false,\n    buttonText:'Start',\n    countdown:0,\n    timerLabel:'Session'\n  }  \n  \n  convertToTime = (seconds) => {\n    const { timeLeft } = this.state;\n    const mins = Math.floor(seconds/60);\n    const secondsLeft = seconds%60;\n    const display = `${mins < 10 ? '0' : ''}${mins}:${secondsLeft < 10 ? '0' : ''}${secondsLeft}`;\n    return display\n  }\n  \n  startCounting = () => {\n    const { timeLeft, pauseClicked, buttonText } = this.state;\n    const now = Date.now();\n    const then = now + timeLeft*1000;\n    \n    this.setState({\n      countdown:setInterval(() => {\n        const { timeLeft, pauseClicked, countdown, buttonText, breakLength, sessionLength, timerLabel } = this.state;\n        const audio = document.getElementById('beep');\n        const secondsLeft = Math.round((then - Date.now())/1000);\n        \n        if(secondsLeft === 0){\n          audio.play();\n        }\n\n      if(secondsLeft < 0) {\n        this.setState({            \n            timerLabel: timerLabel === 'Session' ? 'Break' : 'Session',\n            timeLeft: timerLabel === 'Session' ? breakLength*60 : sessionLength*60,\n            \n          });\n        \n        this.stopCounting();\n        this.startCounting();\n        \n        return;\n        }\n        \n        this.setState({\n        timeLeft:secondsLeft\n       })\n    \n    },1000),\n      pauseClicked: true,\n      buttonText:'Pause'\n    })\n}\n  \n  stopCounting = () => {\n    const { pauseClicked, countdown, buttonText } = this.state;\n  \n  this.setState({ \n    pauseClicked: false,\n    buttonText: 'Resume',\n    countdown:clearInterval(countdown)\n  })\n}\n  \n  changePause = () => {\n  if(this.state.pauseClicked){\n    this.stopCounting()\n  } else {\n    this.startCounting()\n  }\n}\n  \n \n  handleSettings = (e) => {\n    const {sessionLength, breakLength, timerLabel, timeLeft, pauseClicked, buttonText} = this.state;\n    \n    switch (e.target.id) {      \n      case 'session-decrement':{\n         this.setState({\n          sessionLength: sessionLength <= 1 ? 1 : sessionLength - 1,\n           timeLeft:(sessionLength <= 1 ? 1 : sessionLength - 1)*60,\n           timerLabel:'Session'\n        });\n        break;\n      }\n        \n      case 'session-increment':{\n        this.setState({\n          sessionLength:sessionLength >= 60 ? 60 : sessionLength + 1,\n          timeLeft:(sessionLength >= 60 ? 60 : sessionLength + 1)*60,\n          timerLabel:'Session'\n        });\n        break;\n      } \n        \n      case 'break-decrement':{\n         this.setState({\n          breakLength: breakLength <= 1 ? 1 : breakLength - 1,\n          timeLeft: (breakLength <= 1 ? 1 : breakLength - 1)*60,\n           timerLabel:'Break'\n        });\n        break;\n      }\n      \n      case 'break-increment':{\n        this.setState({\n          breakLength: breakLength >= 60 ? 60 : breakLength + 1,\n          timeLeft: (breakLength >= 60 ? 60 : breakLength + 1)*60,\n          timerLabel:'Break'\n        });\n        break;\n      } \n       \n      default:{\n        this.stopCounting();\n        const audio = document.getElementById('beep');\n        audio.pause();\n        audio.currentTime = 0;\n        this.setState({\n          sessionLength: 25,\n          breakLength: 5,\n          timeLeft:25*60,\n          pauseClicked:false,\n          buttonText:'Start',\n          timerLabel:'Session'\n        });\n        \n      }     \n    }\n\n  }\n  \n  render(){\n    const { sessionLength, breakLength, timeLeft, buttonText, timerLabel } = this.state;\n    \n    return (\n      <div className=\"container\">\n        <h1>Pomodoro Clock</h1>\n        \n        <div id=\"pomodoro\">\n          <img className=\"tomato\" src=\"https://pngimg.com/uploads/tomato/tomato_PNG12599.png\"/>\n          <div id=\"timer-label\">{timerLabel}</div>\n          <div id=\"time-left\">{this.convertToTime(timeLeft)}</div>\n          <button id=\"start_stop\" className=\"btn\" onClick={this.changePause}>{ buttonText === 'Pause' ? <i className=\"fas fa-pause\"></i> : <i className=\"fas fa-play\"></i> } {buttonText}</button>        \n        </div>\n        \n        <div className=\"settings\">\n         \n          <div className=\"session\">\n            <p id=\"session-label\">Session Length</p>\n            <div className=\"btn-wrapper\">\n              <button id=\"session-decrement\" className=\"btn\" onClick={this.handleSettings}>-</button>\n              <div id=\"session-length\">{sessionLength}</div>\n              <button id=\"session-increment\" className=\"btn\" onClick={this.handleSettings}>+</button>\n            \n            </div>\n            \n          </div>\n          \n          <button id=\"reset\" className=\"btn\" onClick={this.reset} onClick={this.handleSettings}><i className=\"fas fa-redo\"></i></button>\n        \n          <div className=\"break\">\n            <p id=\"break-label\">Break Length</p>\n            <div className=\"btn-wrapper\">\n              <button id=\"break-decrement\" className=\"btn\" onClick={this.handleSettings}>-</button>              \n              <div id=\"break-length\">{breakLength}</div>\n              <button id=\"break-increment\" className=\"btn\" onClick={this.handleSettings}>+</button>\n              \n            </div>\n          </div>\n        </div>\n       \n        <audio\n          id=\"beep\" src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"/>\n      </div>\n    )\n  }\n}\n\n\nexport default App;\n",{"ruleId":"30","severity":1,"message":"31","line":16,"column":13,"nodeType":"32","messageId":"33","endLine":16,"endColumn":21},{"ruleId":"30","severity":1,"message":"34","line":24,"column":23,"nodeType":"32","messageId":"33","endLine":24,"endColumn":35},{"ruleId":"30","severity":1,"message":"35","line":24,"column":37,"nodeType":"32","messageId":"33","endLine":24,"endColumn":47},{"ruleId":"30","severity":1,"message":"31","line":30,"column":17,"nodeType":"32","messageId":"33","endLine":30,"endColumn":25},{"ruleId":"30","severity":1,"message":"34","line":30,"column":27,"nodeType":"32","messageId":"33","endLine":30,"endColumn":39},{"ruleId":"30","severity":1,"message":"36","line":30,"column":41,"nodeType":"32","messageId":"33","endLine":30,"endColumn":50},{"ruleId":"30","severity":1,"message":"35","line":30,"column":52,"nodeType":"32","messageId":"33","endLine":30,"endColumn":62},{"ruleId":"30","severity":1,"message":"34","line":62,"column":13,"nodeType":"32","messageId":"33","endLine":62,"endColumn":25},{"ruleId":"30","severity":1,"message":"35","line":62,"column":38,"nodeType":"32","messageId":"33","endLine":62,"endColumn":48},{"ruleId":"30","severity":1,"message":"37","line":81,"column":40,"nodeType":"32","messageId":"33","endLine":81,"endColumn":50},{"ruleId":"30","severity":1,"message":"31","line":81,"column":52,"nodeType":"32","messageId":"33","endLine":81,"endColumn":60},{"ruleId":"30","severity":1,"message":"34","line":81,"column":62,"nodeType":"32","messageId":"33","endLine":81,"endColumn":74},{"ruleId":"30","severity":1,"message":"35","line":81,"column":76,"nodeType":"32","messageId":"33","endLine":81,"endColumn":86},{"ruleId":"38","severity":1,"message":"39","line":147,"column":11,"nodeType":"40","endLine":147,"endColumn":96},{"ruleId":"41","severity":1,"message":"42","line":166,"column":67,"nodeType":"43","endLine":166,"endColumn":96},"no-unused-vars","'timeLeft' is assigned a value but never used.","Identifier","unusedVar","'pauseClicked' is assigned a value but never used.","'buttonText' is assigned a value but never used.","'countdown' is assigned a value but never used.","'timerLabel' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute"]